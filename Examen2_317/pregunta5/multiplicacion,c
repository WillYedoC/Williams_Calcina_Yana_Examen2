#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

typedef struct {
    int *row_ptr; 
    int *col_ind; 
    double *values; 
    int nrows; 
    int ncols; 
    int nnz; 
} CSRMatrix;

CSRMatrix multiplyCSR(const CSRMatrix *A, const CSRMatrix *B) {
    if (A->ncols != B->nrows) {
        fprintf(stderr, "Error: Incompatible dimensions for matrix multiplication.\n");
        exit(EXIT_FAILURE);
    }

    int *row_ptr = (int *)malloc((A->nrows + 1) * sizeof(int));
    int *col_ind = NULL;
    double *values = NULL;
    int nnz = 0;

    row_ptr[0] = 0;

    #pragma omp parallel
    {
        // Variables locales para cada thread
        int *local_col_ind = (int *)malloc(A->ncols * sizeof(int));
        double *local_values = (double *)malloc(A->ncols * sizeof(double));
        int local_nnz;

        #pragma omp for schedule(dynamic)
        for (int i = 0; i < A->nrows; ++i) {
            // Inicializar local_col_ind y local_values
            for (int j = 0; j < A->ncols; ++j) {
                local_col_ind[j] = -1;
                local_values[j] = 0.0;
            }
            local_nnz = 0;

            // Multiplicar la fila i de A por la matriz B
            for (int jj = A->row_ptr[i]; jj < A->row_ptr[i + 1]; ++jj) {
                int a_col = A->col_ind[jj];
                double a_val = A->values[jj];

                for (int kk = B->row_ptr[a_col]; kk < B->row_ptr[a_col + 1]; ++kk) {
                    int b_col = B->col_ind[kk];
                    double b_val = B->values[kk];

                    if (local_col_ind[b_col] == -1) {
                        local_col_ind[b_col] = b_col;
                        local_values[b_col] = a_val * b_val;
                        ++local_nnz;
                    } else {
                        local_values[b_col] += a_val * b_val;
                    }
                }
            }

            #pragma omp critical
            {
                for (int j = 0; j < A->ncols; ++j) {
                    if (local_col_ind[j] != -1) {
                        col_ind = (int *)realloc(col_ind, (nnz + 1) * sizeof(int));
                        values = (double *)realloc(values, (nnz + 1) * sizeof(double));
                        col_ind[nnz] = local_col_ind[j];
                        values[nnz] = local_values[j];
                        ++nnz;
                    }
                }
                row_ptr[i + 1] = nnz;
            }
        }

        free(local_col_ind);
        free(local_values);
    }

    CSRMatrix C = {row_ptr, col_ind, values, A->nrows, B->ncols, nnz};
    return C;
}

CSRMatrix createCSRMatrix(int nrows, int ncols, int nnz, int *row_ptr, int *col_ind, double *values) {
    CSRMatrix matrix;
    matrix.nrows = nrows;
    matrix.ncols = ncols;
    matrix.nnz = nnz;
    matrix.row_ptr = row_ptr;
    matrix.col_ind = col_ind;
    matrix.values = values;
    return matrix;
}

void printCSRMatrix(const CSRMatrix *matrix) {
    printf("row_ptr: ");
    for (int i = 0; i <= matrix->nrows; ++i) {
        printf("%d ", matrix->row_ptr[i]);
    }
    printf("\ncol_ind: ");
    for (int i = 0; i < matrix->nnz; ++i) {
        printf("%d ", matrix->col_ind[i]);
    }
    printf("\nvalues: ");
    for (int i = 0; i < matrix->nnz; ++i) {
        printf("%f ", matrix->values[i]);
    }
    printf("\n");
}

int main() {
    // Ejemplo de matrices dispersas A y B en formato CSR
    int row_ptr_A[] = {0, 2, 4};
    int col_ind_A[] = {0, 1, 0, 1};
    double values_A[] = {1.0, 2.0, 3.0, 4.0};
    CSRMatrix A = createCSRMatrix(2, 2, 4, row_ptr_A, col_ind_A, values_A);

    int row_ptr_B[] = {0, 2, 4};
    int col_ind_B[] = {0, 1, 0, 1};
    double values_B[] = {5.0, 6.0, 7.0, 8.0};
    CSRMatrix B = createCSRMatrix(2, 2, 4, row_ptr_B, col_ind_B, values_B);

    // Multiplicar matrices A y B
    CSRMatrix C = multiplyCSR(&A, &B);

    // Imprimir la matriz resultante
    printCSRMatrix(&C);

    // Liberar memoria
    free(C.row_ptr);
    free(C.col_ind);
    free(C.values);

    return 0;
}
